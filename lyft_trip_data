-- CREATING trip log with the trips and its users
SELECT trips.date,
  trips.pickup,
  trips.dropoff,
  trips.type,
  trips.cost,
  riders.first,
  riders.last,
  riders.username
FROM trips
LEFT JOIN riders
  ON trips.rider_id = riders.id;

-- CREATING link between trips and cars during those trips
SELECT *
FROM trips
JOIN cars
  ON trips.car_id = cars.id;

-- UNION to combine updated data <new riders data>
SELECT *
FROM riders
UNION
SELECT *
FROM riders2;

-- ON QUERIES and AGGREGATES
-- AVG. COST FOR A TRIP
SELECT ROUND(AVG(cost), 2)
FROM trips;

-- Look for irregular Lyft users (used Lyft less than 500 times)
-- <for riders only>
SELECT *
FROM riders
WHERE total_trips < 500;

-- <for riders and riders2>
SELECT *
FROM riders
WHERE total_trips < 500
UNION
SELECT *
FROM riders2
WHERE total_trips < 500;

-- # OF ACTIVE CARS
SELECT COUNT(*)
FROM cars
WHERE status = "active";

-- CARS THAT HAVE THE HIGHEST TRIPS COMPLETED
SELECT *
FROM cars
ORDER BY trips_completed DESC
LIMIT 2;
