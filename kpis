A. purchases table - lists all purchases made by players while they're playing Mineblocks.
select * 
from purchases 
order by id 
limit 10;

B. gameplays table - lists the date and platform for each session a user plays.
select * 
from gameplays 
order by id 
limit 10;


--- DAILY REVENUE ---
select
  date(created_at),
  round(sum(price), 2)
from purchases
group by 1
order by 1;


--- UPDATE REVENUE QUERY TO EXCLUDE REFUNDS ---
select
  date(created_at),
  round(sum(price), 2) as daily_rev
from purchases
where refunded_at IS NULL  <--- filtering for refunded_at is null
group by 1
order by 1;


--- DAILY ACTIVE USERS (DAU) --- 
>>> number of unique players seen in-game each day
select
  date(created_at), 
  count(DISTINCT user_id) as dau  <--- important not to double count users who played multiple times, so we’ll use distinct in our count function
from gameplays
group by 1
order by 1;


--- DAILY ACTIVE USERS PER PLATFORM ---
>>> Since Mineblocks is on multiple platforms, we can calculate DAU per-platform.
select
  date(created_at), 
  platform,  <--- Now we want DAU per platform, making the desired output [date, platform, dau_count].
  count(DISTINCT user_id) as dau
from gameplays
group by 1, 2
order by 1, 2;



* Mineblocks, like every freemium game, has two types of users:
  - purchasers: users who have bought things in the game
  - players: users who play the game but have not yet purchased
  


--- DAILY AVERAGE REVENUE PER PURCHASING ORDER (ARPPU) ---
>>> shows if the average amount of money spent by purchasers is going up over time
>>> sum of revenue divided by the number of purchasers per day
select
  date(created_at),
  round(sum(price) / count(distinct user_id), 2) as arppu  <--- numerator displays daily revenue; denominator displays the number of purchasers
from purchases
where refunded_at is null
group by 1
order by 1;


--- DAILY AVERAGE REVENUE PER USER (ARPU) ---
>>> ARPU measures the average amount of money we’re getting across all players, whether or not they’ve purchased.
>>> ARPPU increases if purchasers are spending more money. 
>>> But ARPU increases if more players are choosing to purchase, even if the purchase size stays consistent.
      
      DAILY ARPU - revenue divided by the number of players, per-day
      >>> calculate the daily revenue and daily active users separately, and then join them on their dates
      >>> use with clauses make it easy to define and use results in a more organized way than subqueries

1. Use a with clause to define daily_revenue and then select from it.
with daily_revenue as (
  select
    date(created_at) as dt,
    round(sum(price), 2) as rev
  from purchases
  where refunded_at is null
  group by 1
)
select * 
from daily_revenue 
order by dt;

2. Add in DAU from earlier. Complete the query by calling the DAU query we created earlier, now aliased as daily_players.
with daily_revenue as (
  select
    date(created_at) as dt,
    round(sum(price), 2) as rev
  from purchases
  where refunded_at is null
  group by 1
),
daily_players as (
  select
    date(created_at) as dt,
    count(distinct user_id) as players
  from gameplays
  group by 1
)
select * from daily_players order by dt;

3. Join them on their dates and calculate daily ARPU. 
>>> Complete the query by adding the keyword using in the join clause.
with daily_revenue as (
  select
    date(created_at) as dt,
    round(sum(price), 2) as rev
  from purchases
  where refunded_at is null
  group by 1
),
daily_players as (
  select
    date(created_at) as dt,
    count(distinct user_id) as players
  from gameplays
  group by 1
)
select
  daily_revenue.dt,
  daily_revenue.rev / daily_players.players
from daily_revenue
  join daily_players using (dt); *** we used using instead of on in the join clause. This is a special case join.
                                 *** When the columns to join have the same name in both tables you can use using instead of on.
  
*** daily_revenue.dt represents the date
*** daily_revenue.rev / daily_players.players is the daily revenue divided by the number of players that day
*** In full, it represents how much the company is making per player, per day.
*** Our use of the using keyword is in this case equivalent to this clause:
   _____________________________________________ 
   | from daily_revenue                        |   
   |   join daily_player                       | 
   |   on daily_revenue.dt = daily_players.dt; |
   |-------------------------------------------|
   
   
--- 1 DAY RETENTION ---
>>> Percent of Mineblock players that are returning to play the next day
>>> This will let us track whether or not Mineblocks is getting “stickier” over time. The stickier our game, the more days players will spend in-game.
>>> And more time in-game means more opportunities to monetize and grow our business.

1.  Need to get our data formatted in a way where we can determine if a user returned
>>> self-join will let us connect the players on Day N to the players on Day N+1. 
>>> In order to join a table to itself, it must be aliased so we can access each copy separately.
>>> Aliased gameplays in the query above because in the next step, 
    we need to join gameplays to itself so we can get a result selecting [date, user_id, user_id_if_retained].
select
  date(g1.created_at) as dt,
  g1.user_id
from gameplays as g1
  join gameplays as g2
  on g1.user_id = g2.user_id  <--- join statement to join gameplays to itself on user_id using the aliases g1 and g2.
order by 1
limit 100;

*** join gameplays on itself so that we can have access to all gameplays for each player, for each of their gameplays.

2. Modify the query to add join clause for date
select
  date(g1.created_at) as dt,
  g1.user_id,
  g2.user_id  <--- add this for comparison
from gameplays as g1
  join gameplays as g2
  on g1.user_id = g2.user_id
  and date(g1.created_at) = date(datetime(g2.created_at, "-1 day"))  <--- "only join rows where the date in g1 is one less than the date in g2",
order by 1                                                                 which makes it possible to see if users have returned
limit 100;

3. Correction: Using Left Join so all rows in g1 are preserved, leaving nulls in the rows from g2 where users did not return to play the next day
*** Using inner join requires that the condition be met for all rows, effectively limiting our selection to only the users that have returned. ***
>>> Change the join clause to use left join.
>>> Count the distinct number of users from g1 and g2 per date.
select
  date(g1.created_at) as dt,
  count(distinct g1.user_id) as total_users,  <--- count distinct for total users
  count(distinct g2.user_id) as retained_users  <--- count distinct for retained users after a day
from gameplays as g1
  left join gameplays as g2 on  <--- using left join
    g1.user_id = g2.user_id
    and date(g1.created_at) = date(datetime(g2.created_at, '-1 day'))
group by 1
order by 1
limit 100;

4. Calculate 1 Day Retention
>>> Now that we have retained users as count(distinct g2.user_id) and total users as count(distinct g1.user_id)
>>> Divide retained users by total users
select
  date(g1.created_at) as dt,
  round(100 * count(distinct g2.user_id) /     <----- calculation
    count(distinct g1.user_id)) as retention
from gameplays as g1
  left join gameplays as g2
    on g1.user_id = g2.user_id
    and date(g1.created_at) = date(datetime(g2.created_at, '-1 day'))
group by 1
order by 1
limit 100;
